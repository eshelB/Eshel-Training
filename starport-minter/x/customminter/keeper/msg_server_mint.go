package keeper

import (
	"context"
	"fmt"
	"math"
	"strings"

	sdk "github.com/cosmos/cosmos-sdk/types"
	banktypes "github.com/cosmos/cosmos-sdk/x/bank/types"
	"github.com/eshelB/Training/starport-minter/x/customminter/types"
)

func (k msgServer) Mint(goCtx context.Context, msg *types.MsgMint) (*types.MsgMintResponse, error) {
	fmt.Println("recienved tx to mint", msg.TokenName)

	ctx := sdk.UnwrapSDKContext(goCtx)

	_ = ctx

	baseName := msg.TokenName + "-base"

	denomMetaData := banktypes.Metadata{
		Description: "token generated by custom minter",
		Base:        baseName, // Denomination unit with exponent = 0.
		DenomUnits: []*banktypes.DenomUnit{ // all denomination units
			{
				Denom:    baseName,
				Exponent: uint32(0),
			},
			{
				Denom:    msg.TokenName,
				Exponent: msg.Decimals,
			},
		},
		Display: msg.TokenName, // suggested denomination for clients to display
		Name:    msg.TokenName,
		Symbol:  strings.ToUpper(msg.TokenName),
	}

	// creator sets the quantity of the coins denominated in the specified unit, not the base
	displayQuantity := sdk.NewInt(int64(msg.Quantity * uint64(math.Pow(10, float64(msg.Decimals)))))

	coin := sdk.NewCoin(baseName, displayQuantity)

	err := k.bankKeeper.MintCoins(ctx, types.ModuleName, []sdk.Coin{coin})
	if err != nil {
		return nil, types.ErrMintingCoins
	}

	k.bankKeeper.SetDenomMetaData(ctx, denomMetaData)

	err = k.bankKeeper.MintCoins(ctx, types.ModuleName, []sdk.Coin{coin})
	if err != nil {
		return nil, types.ErrMintingCoins
	}

	recipient, err := sdk.AccAddressFromBech32(msg.ReceivingAddress)
	if err != nil {
		// todo: maybe better to return error?
		panic(err)
	}

	err = k.bankKeeper.SendCoinsFromModuleToAccount(ctx, types.ModuleName, recipient, []sdk.Coin{coin})
	if err != nil {
		// todo: maybe better to return error?
		panic(err)
	}

	return &types.MsgMintResponse{}, nil
}
